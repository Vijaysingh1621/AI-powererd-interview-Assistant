// Test script to simulate PDF upload and debug the 500 error
const fs = require('fs');
const path = require('path');

// Create a minimal test PDF file
const createTestPDF = () => {
  const testPdfContent = Buffer.from([
    0x25, 0x50, 0x44, 0x46, 0x2D, 0x31, 0x2E, 0x34, // %PDF-1.4
    0x0A, 0x25, 0xC4, 0xE5, 0xF2, 0xE5, 0xEB, 0xA7,
    0xF3, 0xA0, 0xD0, 0xC4, 0xC6, 0x0A, // Binary comment
    // Simple PDF content
    0x31, 0x20, 0x30, 0x20, 0x6F, 0x62, 0x6A, 0x0A, // 1 0 obj
    0x3C, 0x3C, 0x0A, // <<
    0x2F, 0x54, 0x79, 0x70, 0x65, 0x20, 0x2F, 0x43, 0x61, 0x74, 0x61, 0x6C, 0x6F, 0x67, 0x0A, // /Type /Catalog
    0x2F, 0x50, 0x61, 0x67, 0x65, 0x73, 0x20, 0x32, 0x20, 0x30, 0x20, 0x52, 0x0A, // /Pages 2 0 R
    0x3E, 0x3E, 0x0A, // >>
    0x65, 0x6E, 0x64, 0x6F, 0x62, 0x6A, 0x0A, // endobj
    
    0x32, 0x20, 0x30, 0x20, 0x6F, 0x62, 0x6A, 0x0A, // 2 0 obj
    0x3C, 0x3C, 0x0A, // <<
    0x2F, 0x54, 0x79, 0x70, 0x65, 0x20, 0x2F, 0x50, 0x61, 0x67, 0x65, 0x73, 0x0A, // /Type /Pages
    0x2F, 0x4B, 0x69, 0x64, 0x73, 0x20, 0x5B, 0x33, 0x20, 0x30, 0x20, 0x52, 0x5D, 0x0A, // /Kids [3 0 R]
    0x2F, 0x43, 0x6F, 0x75, 0x6E, 0x74, 0x20, 0x31, 0x0A, // /Count 1
    0x3E, 0x3E, 0x0A, // >>
    0x65, 0x6E, 0x64, 0x6F, 0x62, 0x6A, 0x0A, // endobj
    
    0x33, 0x20, 0x30, 0x20, 0x6F, 0x62, 0x6A, 0x0A, // 3 0 obj
    0x3C, 0x3C, 0x0A, // <<
    0x2F, 0x54, 0x79, 0x70, 0x65, 0x20, 0x2F, 0x50, 0x61, 0x67, 0x65, 0x0A, // /Type /Page
    0x2F, 0x50, 0x61, 0x72, 0x65, 0x6E, 0x74, 0x20, 0x32, 0x20, 0x30, 0x20, 0x52, 0x0A, // /Parent 2 0 R
    0x2F, 0x43, 0x6F, 0x6E, 0x74, 0x65, 0x6E, 0x74, 0x73, 0x20, 0x34, 0x20, 0x30, 0x20, 0x52, 0x0A, // /Contents 4 0 R
    0x3E, 0x3E, 0x0A, // >>
    0x65, 0x6E, 0x64, 0x6F, 0x62, 0x6A, 0x0A, // endobj
    
    0x34, 0x20, 0x30, 0x20, 0x6F, 0x62, 0x6A, 0x0A, // 4 0 obj
    0x3C, 0x3C, 0x0A, // <<
    0x2F, 0x4C, 0x65, 0x6E, 0x67, 0x74, 0x68, 0x20, 0x32, 0x34, 0x0A, // /Length 24
    0x3E, 0x3E, 0x0A, // >>
    0x73, 0x74, 0x72, 0x65, 0x61, 0x6D, 0x0A, // stream
    0x42, 0x54, 0x0A, // BT
    0x2F, 0x46, 0x31, 0x20, 0x31, 0x32, 0x20, 0x54, 0x66, 0x0A, // /F1 12 Tf
    0x28, 0x48, 0x65, 0x6C, 0x6C, 0x6F, 0x29, 0x20, 0x54, 0x6A, 0x0A, // (Hello) Tj
    0x45, 0x54, 0x0A, // ET
    0x65, 0x6E, 0x64, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6D, 0x0A, // endstream
    0x65, 0x6E, 0x64, 0x6F, 0x62, 0x6A, 0x0A, // endobj
    
    // xref table
    0x78, 0x72, 0x65, 0x66, 0x0A, // xref
    0x30, 0x20, 0x35, 0x0A, // 0 5
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x20, 0x36, 0x35, 0x35, 0x33, 0x35, 0x20, 0x66, 0x20, 0x0A, // 0000000000 65535 f 
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x39, 0x20, 0x30, 0x30, 0x30, 0x30, 0x30, 0x20, 0x6E, 0x20, 0x0A, // 0000000009 00000 n 
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x35, 0x34, 0x20, 0x30, 0x30, 0x30, 0x30, 0x30, 0x20, 0x6E, 0x20, 0x0A, // 0000000054 00000 n 
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x31, 0x31, 0x20, 0x30, 0x30, 0x30, 0x30, 0x30, 0x20, 0x6E, 0x20, 0x0A, // 0000000111 00000 n 
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x38, 0x30, 0x20, 0x30, 0x30, 0x30, 0x30, 0x30, 0x20, 0x6E, 0x20, 0x0A, // 0000000180 00000 n 
    
    // trailer
    0x74, 0x72, 0x61, 0x69, 0x6C, 0x65, 0x72, 0x0A, // trailer
    0x3C, 0x3C, 0x0A, // <<
    0x2F, 0x53, 0x69, 0x7A, 0x65, 0x20, 0x35, 0x0A, // /Size 5
    0x2F, 0x52, 0x6F, 0x6F, 0x74, 0x20, 0x31, 0x20, 0x30, 0x20, 0x52, 0x0A, // /Root 1 0 R
    0x3E, 0x3E, 0x0A, // >>
    0x73, 0x74, 0x61, 0x72, 0x74, 0x78, 0x72, 0x65, 0x66, 0x0A, // startxref
    0x32, 0x33, 0x33, 0x0A, // 233
    0x25, 0x25, 0x45, 0x4F, 0x46, 0x0A // %%EOF
  ]);

  const testPdfPath = path.join(__dirname, 'test.pdf');
  fs.writeFileSync(testPdfPath, testPdfContent);
  return testPdfPath;
};

async function testPDFUpload() {
  const testPdfPath = createTestPDF();
  
  try {
    const FormData = (await import('form-data')).default;
    const fetch = (await import('node-fetch')).default;
    
    const form = new FormData();
    form.append('file', fs.createReadStream(testPdfPath), {
      filename: 'test.pdf',
      contentType: 'application/pdf'
    });

    console.log('üß™ Testing PDF upload to http://localhost:3001/api/pdf');
    
    const response = await fetch('http://localhost:3001/api/pdf', {
      method: 'POST',
      body: form
    });

    const result = await response.text();
    
    console.log('üìã Response Status:', response.status);
    console.log('üìÑ Response Body:', result);
    
    if (!response.ok) {
      console.error('‚ùå Upload failed with status:', response.status);
    } else {
      console.log('‚úÖ Upload successful!');
    }
    
  } catch (error) {
    console.error('üö® Error during upload test:', error);
  } finally {
    // Clean up test file
    if (fs.existsSync(testPdfPath)) {
      fs.unlinkSync(testPdfPath);
    }
  }
}

// Run the test
testPDFUpload();
